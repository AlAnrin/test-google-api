{"version":3,"sources":["Actions.js","BookCard.js","images/1604222140385.png","BookDetail.js","App.js","serviceWorker.js","Reducer.js","index.js"],"names":["SET_DATA","SET_TOTAL_ITEMS","SET_CURRENT_BOOK","SET_START_INDEX","SET_MAX_RESULT","SET_FILTER_VALUE","SET_PLACE_FIND","setCurrentBook","currentBook","type","payload","BookCard","Component","constructor","props","super","item","authors","this","date","volumeInfo","i","length","render","className","imageLinks","alt","title","src","thumbnail","path","mdiFileImageOutline","size","description","substring","BookDetail","formatLanguage","lang","formatDate","arr","split","missingImage","map","author","index","language","publishedDate","pageCount","Tooltip","aria-label","IconButton","onClick","setCurrentBookAction","color","mdiArrowLeft","connect","store","dispatch","App","state","redirect","isExact","$valueFind","valueFind","getDate","name","a","join","placeFind","url","baseUrl","api","startIndex","maxResults","fetch","api_call","json","response","setTotalItemsAction","totalItems","setDataAction","items","setState","handleChange","event","target","value","handleInputChange","checked","handleSelectChange","setPlaceFindAction","setMaxResultAction","checkCanLoadNewData","clearFilterValueEvent","setFilterValueAction","keyPressEvent","key","FormControl","Input","onChange","e","onKeyPress","endAdornment","InputAdornment","position","disabled","mdiCloseBox","mdiFeatureSearch","placement","FormControlLabel","control","Checkbox","InputLabel","Select","autoWidth","MenuItem","to","setStartIndexAction","mdiChevronDoubleLeft","mdiChevronLeft","Math","floor","mdiChevronRight","mdiChevronDoubleRight","data","id","component","componentDidUpdate","prevProps","prevState","snapshot","filterValue","setFilterValue","setData","setTotalItems","maxResult","setMaxResult","setStartIndex","setPlaceFind","Boolean","window","location","hostname","match","initialState","createStore","action","applyMiddleware","thunk","logger","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66f5fa22.chunk.js","sourcesContent":["export const SET_DATA = 'SET_DATA';\r\nexport const SET_TOTAL_ITEMS = 'SET_TOTAL_ITEMS';\r\nexport const SET_CURRENT_BOOK = 'SET_CURRENT_BOOK';\r\nexport const SET_START_INDEX = 'SET_START_INDEX';\r\nexport const SET_MAX_RESULT = 'SET_MAX_RESULT';\r\nexport const SET_FILTER_VALUE = 'SET_FILTER_VALUE';\r\nexport const SET_PLACE_FIND = 'SET_PLACE_FIND';\r\n\r\nexport function setFilterValue(filterValue) {\r\n    return {\r\n        type: SET_FILTER_VALUE,\r\n        payload: filterValue\r\n    }\r\n}\r\n\r\nexport function setPlaceFind(placeFind) {\r\n    return {\r\n        type: SET_PLACE_FIND,\r\n        payload: placeFind\r\n    }\r\n}\r\n\r\nexport function setData(data) {\r\n    return {\r\n        type: SET_DATA,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport function setCurrentBook(currentBook) {\r\n    return {\r\n        type: SET_CURRENT_BOOK,\r\n        payload: currentBook\r\n    }\r\n}\r\n\r\nexport function setMaxResult(maxResult) {\r\n    return {\r\n        type: SET_MAX_RESULT,\r\n        payload: maxResult\r\n    }\r\n}\r\n\r\nexport function setStartIndex(startIndex) {\r\n    return {\r\n        type: SET_START_INDEX,\r\n        payload: startIndex\r\n    }\r\n}\r\n\r\nexport function setTotalItems(totalItems) {\r\n    return {\r\n        type: SET_TOTAL_ITEMS,\r\n        payload: totalItems\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {mdiFileImageOutline} from '@mdi/js';\r\nimport Icon from \"@mdi/react\";\r\n\r\nclass BookCard extends Component {\r\n    item = null;\r\n    authors = '';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.item = this.props.date;\r\n        if (this.item.volumeInfo.authors) {\r\n            for (let i = 0; i < this.item.volumeInfo.authors.length; i++) {\r\n                this.authors += this.item.volumeInfo.authors[i];\r\n                this.authors += (i + 1) < this.item.volumeInfo.authors.length ? ', ' : '';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"column book-row column-bottom-border\">\r\n                {\r\n                    this.item.volumeInfo.imageLinks ?\r\n                        <img alt={this.item.volumeInfo.title} src={this.item.volumeInfo.imageLinks.thumbnail}/> :\r\n                        <div className=\"missing-image\">\r\n                            <Icon className=\"missing-image-icon\" path={mdiFileImageOutline} size={2}/>\r\n                        </div>\r\n                }\r\n                <div className=\"row book-info\">\r\n                    <span>{this.authors}</span>\r\n                    <h3>{this.item.volumeInfo.title}</h3>\r\n                    {\r\n                        this.item.volumeInfo.description &&\r\n                        <span>\r\n                            {\r\n                                this.item.volumeInfo.description.substring(0, 150)\r\n                            }\r\n                            ...\r\n                        </span>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BookCard;","export default __webpack_public_path__ + \"static/media/1604222140385.747d97da.png\";","import React, { Component } from 'react';\r\nimport missingImage from './images/1604222140385.png'\r\nimport {connect} from \"react-redux\";\r\nimport Icon from '@mdi/react';\r\nimport {mdiArrowLeft, mdiFileImageOutline} from '@mdi/js';\r\nimport {setCurrentBook} from \"./Actions\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        currentBook: store.currentBook\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setCurrentBookAction: currentBook => dispatch(setCurrentBook(currentBook)),\r\n    }\r\n}\r\n\r\nclass BookDetail extends Component {\r\n    formatLanguage(lang) {\r\n        switch(lang) {\r\n            case \"en\": return \"Английский\";\r\n            case \"ru\": return \"Русский\";\r\n            case \"fr\": return \"Французский\";\r\n            case \"de\": return \"Немецкий\";\r\n            default: return lang;\r\n        }\r\n    }\r\n\r\n    formatDate(date) {\r\n        const arr = date.split('-');\r\n        if (arr.length === 1) return date;\r\n        if (arr.length === 3) return arr[0];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.props.currentBook &&\r\n            <div className=\"column\">\r\n                {\r\n                    this.props.currentBook.volumeInfo.imageLinks ?\r\n                        <img alt={missingImage} src={this.props.currentBook.volumeInfo.imageLinks.thumbnail}/> :\r\n                        <div className=\"missing-image\">\r\n                            <Icon className=\"missing-image-icon\" path={mdiFileImageOutline} size={2}/>\r\n                        </div>\r\n                }\r\n                <div className=\"book-info\">\r\n                    <div className=\"column\">\r\n                        {\r\n                            this.props.currentBook.volumeInfo.authors &&\r\n                            this.props.currentBook.volumeInfo.authors.map((author, index) =>\r\n                                <div key={index}>\r\n                                    <span>{author}</span>\r\n                                    {\r\n                                        index < this.props.currentBook.volumeInfo.authors.length - 1 &&\r\n                                        <span>, </span>\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                    <h3>{this.props.currentBook.volumeInfo.title}</h3>\r\n                    <span>{this.props.currentBook.volumeInfo.description}</span>\r\n                    <div className=\"row description\">\r\n                        <span><i>Язык:</i> {this.formatLanguage(this.props.currentBook.volumeInfo.language)}</span>\r\n                        <span><i>Дата публикации:</i> {this.formatDate(this.props.currentBook.volumeInfo.publishedDate)}</span>\r\n                        <span><i>Количество страниц:</i> {this.props.currentBook.volumeInfo.pageCount}</span>\r\n                    </div>\r\n                </div>\r\n                <Tooltip title=\"Назад\" aria-label=\"add\">\r\n                    <IconButton className=\"icon-button back-arrow-icon-button\"\r\n                                onClick={() => this.props.setCurrentBookAction(null)}\r\n                                color=\"primary\">\r\n                        <Icon className=\"back-arrow-icon\" path={mdiArrowLeft}\r\n                              size={1}/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BookDetail);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {BrowserRouter as Router, Route, NavLink, Redirect} from \"react-router-dom\";\r\nimport {setFilterValue, setData, setCurrentBook, setTotalItems, setMaxResult, setStartIndex, setPlaceFind} from \"./Actions\";\r\nimport BookCard from './BookCard';\r\nimport BookDetail from './BookDetail';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Icon from '@mdi/react';\r\nimport { mdiFeatureSearch, mdiChevronDoubleLeft, mdiChevronDoubleRight, mdiChevronLeft, mdiChevronRight, mdiCloseBox } from '@mdi/js';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        baseUrl: store.baseUrl,\r\n        api: store.api,\r\n        filterValue: store.filterValue,\r\n        data: store.data,\r\n        currentBook: store.currentBook,\r\n        totalItems: store.totalItems,\r\n        startIndex: store.startIndex,\r\n        maxResults: store.maxResults,\r\n        placeFind: store.placeFind\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setFilterValueAction: filterValue => dispatch(setFilterValue(filterValue)),\r\n        setDataAction: data => dispatch(setData(data)),\r\n        setCurrentBookAction: currentBook => dispatch(setCurrentBook(currentBook)),\r\n        setTotalItemsAction: totalItems => dispatch(setTotalItems(totalItems)),\r\n        setMaxResultAction: maxResult => dispatch(setMaxResult(maxResult)),\r\n        setStartIndexAction: startIndex => dispatch(setStartIndex(startIndex)),\r\n        setPlaceFindAction: placeFind => dispatch(setPlaceFind(placeFind))\r\n    }\r\n};\r\n\r\nclass App extends Component {\r\n    state = {\r\n        redirect: false,\r\n        isExact: false,\r\n        $valueFind: '',\r\n        valueFind: ''\r\n    }\r\n\r\n    getDate = async (name) => {\r\n        name = this.state.isExact ? `\"${name.split(' ').join('+')}\"` : name;\r\n        if (this.props.placeFind === 1)\r\n            name = `intitle:${name}`;\r\n        if (this.props.placeFind === 2)\r\n            name = `inauthor:${name}`;\r\n        const url = `${this.props.baseUrl}=${name}&key=${this.props.api}&startIndex=${this.props.startIndex}&maxResults=${this.props.maxResults}`\r\n        const api_call = await fetch(url);\r\n\r\n        const response = await api_call.json();\r\n\r\n        this.props.setTotalItemsAction(response.totalItems);\r\n        this.props.setDataAction(response.items);\r\n        this.setState({$valueFind: name});\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({valueFind: event.target.value});\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        this.setState({isExact: event.target.checked});\r\n    }\r\n\r\n    handleSelectChange(event, value) {\r\n        if (value === 1) {\r\n            this.props.setPlaceFindAction(event.target.value);\r\n        }\r\n        else {\r\n            this.props.setMaxResultAction(+event.target.value);\r\n        }\r\n    }\r\n\r\n    checkCanLoadNewData() {\r\n        return this.state.valueFind.length > 1 && this.state.valueFind !== this.state.$valueFind;\r\n    }\r\n\r\n    clearFilterValueEvent(event) {\r\n        this.setState({valueFind: ''});\r\n        this.props.setFilterValueAction('');\r\n    }\r\n\r\n    keyPressEvent(event) {\r\n        if (event.key === 'Enter' && this.checkCanLoadNewData()) {\r\n            this.props.setFilterValueAction(this.state.valueFind);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"column column-bottom-border\">\r\n                    <FormControl className=\"item-two-on-row\">\r\n                        <Input\r\n                            type=\"text\" value={this.state.valueFind}\r\n                            onChange={e => this.handleChange(e)}\r\n                            onKeyPress={e => this.keyPressEvent(e)}\r\n                            endAdornment={\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton disabled={this.state.valueFind === ''}\r\n                                                onClick={e => this.clearFilterValueEvent(e)}\r\n                                                color=\"primary\">\r\n                                        <Icon className=\"back-arrow-icon\" path={mdiCloseBox}\r\n                                              size={1}/>\r\n                                    </IconButton>\r\n                                    <IconButton disabled={!this.checkCanLoadNewData()}\r\n                                                onClick={e => this.keyPressEvent({key: 'Enter'})}\r\n                                                color=\"primary\">\r\n                                        <Icon className=\"search-icon-button\" path={mdiFeatureSearch}\r\n                                              size={1}/>\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            }\r\n                        />\r\n                    </FormControl>\r\n                    <Tooltip title=\"Точное соответствие\" placement=\"bottom\">\r\n                        <FormControlLabel\r\n                                          control={\r\n                                              <Checkbox\r\n                                                  checked={this.state.isExact}\r\n                                                  onChange={e => this.handleInputChange(e)}\r\n                                                  color=\"primary\"\r\n                                              />\r\n                                          }/>\r\n                    </Tooltip>\r\n                    <div className=\"item-two-on-row\">\r\n                        <FormControl className=\"item-half-on-row\">\r\n                            <InputLabel>Выберите место поиска</InputLabel>\r\n                            <Select\r\n                                value={this.props.placeFind}\r\n                                onChange={e => this.handleSelectChange(e, 1)}\r\n                                autoWidth>\r\n                                <MenuItem value={0}>Везде</MenuItem>\r\n                                <MenuItem value={1}>Заголовке</MenuItem>\r\n                                <MenuItem value={2}>Автор</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className=\"item-half-on-row\">\r\n                            <InputLabel>Количество книг на страницу</InputLabel>\r\n                            <Select\r\n                                value={this.props.maxResults}\r\n                                onChange={e => this.handleSelectChange(e, 2)}\r\n                                autoWidth>\r\n                                <MenuItem value={10}>10</MenuItem>\r\n                                <MenuItem value={20}>20</MenuItem>\r\n                                <MenuItem value={40}>40</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                </div>\r\n                <Router>\r\n                    {\r\n                        this.state.redirect &&\r\n                        <Redirect to='/'/>\r\n                    }\r\n                    <Route path=\"/\">\r\n                        {\r\n                            this.props.currentBook === null &&\r\n                            <div className=\"content\">\r\n                                <div className=\"column\">\r\n                                    <div className=\"item-five-on-row-with-center\">\r\n                                        <IconButton\r\n                                            disabled={this.props.startIndex === 0}\r\n                                            onClick={() => this.props.setStartIndexAction(0)}\r\n                                            color=\"primary\">\r\n                                            <Icon path={mdiChevronDoubleLeft}\r\n                                                  size={1}/>\r\n                                        </IconButton>\r\n                                    </div>\r\n                                    <div className=\"item-five-on-row-with-center\">\r\n                                        <IconButton\r\n                                                    disabled={this.props.startIndex === 0}\r\n                                                    onClick={() => this.props.setStartIndexAction(this.props.startIndex - this.props.maxResults)}\r\n                                                    color=\"primary\">\r\n                                            <Icon path={mdiChevronLeft}\r\n                                                  size={1}/>\r\n                                        </IconButton>\r\n                                    </div>\r\n                                    <div className=\"item-five-on-row-center\">\r\n                                        <Tooltip title=\"Текущая страница / общее количество страниц\" aria-label=\"add\">\r\n                                            <span>\r\n                                                {\r\n                                                    Math.floor(((this.props.startIndex + 1) / this.props.maxResults) + 1)\r\n                                                }\r\n                                                /\r\n                                                {\r\n                                                    Math.floor(this.props.totalItems / this.props.maxResults + 1)\r\n                                                }\r\n                                            </span>\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                    <div className=\"item-five-on-row-with-center\">\r\n                                        <IconButton\r\n                                            disabled={this.props.startIndex + this.props.maxResults > this.props.totalItems}\r\n                                            onClick={() => this.props.setStartIndexAction(this.props.startIndex + this.props.maxResults)}\r\n                                            color=\"primary\">\r\n                                            <Icon path={mdiChevronRight}\r\n                                                  size={1}/>\r\n                                        </IconButton>\r\n                                    </div>\r\n                                    <div className=\"item-five-on-row-with-center\">\r\n                                        <IconButton\r\n                                            disabled={this.props.startIndex + this.props.maxResults > this.props.totalItems}\r\n                                            onClick={() => this.props.setStartIndexAction(Math.floor(this.props.totalItems / this.props.maxResults) * this.props.maxResults)}\r\n                                            color=\"primary\">\r\n                                            <Icon path={mdiChevronDoubleRight}\r\n                                                  size={1}/>\r\n                                        </IconButton>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"rowDays\">\r\n                                    {\r\n                                        this.props.data && this.props.data.length !== 0 &&\r\n                                        this.props.data.map(item =>\r\n                                            <NavLink key={item.id} to={item.id}\r\n                                                     onClick={() => this.props.setCurrentBookAction(item)}>\r\n                                                <BookCard date={item}/>\r\n                                            </NavLink>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </Route>\r\n                    <Route path=\"/:id\" component={BookDetail}/>\r\n                </Router>\r\n            </div>);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.filterValue !== this.props.filterValue) {\r\n            if (this.props.filterValue !== '')\r\n                this.getDate(this.props.filterValue);\r\n            else {\r\n                this.setState({$valueFind: ''});\r\n                this.props.setDataAction([]);\r\n                this.props.setTotalItemsAction(0);\r\n                this.props.setStartIndexAction(0)\r\n            }\r\n        }\r\n        if (prevProps.placeFind !== this.props.placeFind) {\r\n            if (this.props.filterValue !== '')\r\n                this.getDate(this.props.filterValue);\r\n        }\r\n        if (prevProps.startIndex !== this.props.startIndex) {\r\n            if (this.props.filterValue !== '')\r\n                this.getDate(this.props.filterValue);\r\n        }\r\n        if (prevProps.maxResults !== this.props.maxResults) {\r\n            if (this.props.filterValue !== '')\r\n                this.getDate(this.props.filterValue);\r\n        }\r\n        if (prevProps.currentBook !== this.props.currentBook) {\r\n            this.setState({ redirect: this.props.currentBook === null })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import { SET_DATA, SET_TOTAL_ITEMS, SET_CURRENT_BOOK, SET_MAX_RESULT, SET_START_INDEX, SET_FILTER_VALUE, SET_PLACE_FIND } from './Actions'\r\n\r\nconst initialState = {\r\n    baseUrl: 'https://www.googleapis.com/books/v1/volumes?q',\r\n    api: \"AIzaSyBSgvdpNgfB_F992Tvobm3djh9Ie082AIM\",\r\n    filterValue: '',\r\n    data: [],\r\n    currentBook: null,\r\n    totalItems: 0,\r\n    startIndex: 0,\r\n    maxResults: 10,\r\n    placeFind: 0\r\n}\r\n\r\nexport function Reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_PLACE_FIND:\r\n            return {\r\n                ...state,\r\n                placeFind: action.payload\r\n            }\r\n        case SET_FILTER_VALUE:\r\n            return {\r\n                ...state,\r\n                filterValue: action.payload\r\n            }\r\n        case SET_DATA:\r\n            return {\r\n                ...state,\r\n                data: action.payload\r\n            }\r\n        case SET_CURRENT_BOOK:\r\n            return {\r\n                ...state,\r\n                currentBook: action.payload\r\n            }\r\n        case SET_TOTAL_ITEMS:\r\n            return {\r\n                ...state,\r\n                totalItems: action.payload\r\n            }\r\n        case SET_MAX_RESULT:\r\n            return {\r\n                ...state,\r\n                maxResults: action.payload\r\n            }\r\n        case SET_START_INDEX:\r\n            return {\r\n                ...state,\r\n                startIndex: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport {applyMiddleware, createStore} from 'redux';\r\nimport logger from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\nimport {Reducer} from \"./Reducer\";\r\n\r\nconst store = createStore(Reducer, applyMiddleware(thunk, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}